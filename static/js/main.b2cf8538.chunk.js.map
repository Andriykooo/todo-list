{"version":3,"sources":["store/app.tsx","store/todoForm.ts","store/index.tsx","hooks/useTypedSelector.ts","components/Todo/Todo.tsx","components/TodoForm/TodoForm.tsx","components/TodoList/TodoList.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["DELETE_TODO","ADD_TODO","SET_COMPLETED_TODO","SET_SEARCH_FIELD","SET_FILTER_TODO_BY","appActions","todoId","type","payload","addTodoField","todo","searchField","filterTodoBy","initialState","todos","SET_ADD_TODO_FIELD","todoFormActions","reducer","combineReducers","state","action","filter","currentTodo","id","text","completed","length","map","completedTodo","todoForm","store","createStore","composeWithDevTools","applyMiddleware","useTypedSelector","useSelector","Todo","dispatch","useDispatch","className","checked","onChange","onClick","TodoForm","onSubmit","event","value","preventDefault","name","maxLength","placeholder","target","onChangeAddTodoField","TodoList","App","onClickFilterTodoBy","filterBy","preparedTodos","includes","query","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sMAAMA,EAAc,kBACdC,EAAW,eACXC,EAAqB,gBACrBC,EAAmB,uBACnBC,EAAqB,yBAcdC,EACC,SAACC,GAAD,MAAqB,CAAEC,KAAMP,EAAaQ,QAASF,IADpDD,EAEF,SAACI,GAAD,MAA2B,CAAEF,KAAMN,EAAUO,QAASC,IAFpDJ,EAGD,SAACK,GAAD,MAAqB,CAAEH,KAAML,EAAoBM,QAASE,IAHzDL,EAIK,SAACM,GAAD,MAA0B,CAAEJ,KAAMJ,EAAkBK,QAASG,IAJlEN,EAKM,SAACO,GAAD,MAA2B,CAAEL,KAAMH,EAAoBI,QAASI,IAoC7EC,EAAyB,CAC7BC,MAAO,GACPH,YAAa,GACbC,aAAc,OC9DVG,EAAqB,8BASdC,EACM,SAACP,GAAD,MAA2B,CAAEF,KAAMQ,EAAoBP,QAASC,IAG7EI,EAAe,CACnBJ,aAAc,ICNVQ,EAAUC,0BAAgB,CAC9BJ,MFwD0B,WAAqD,IAApDK,EAAmD,uDAA3CN,EAAcO,EAA6B,uCAC9E,OAAQA,EAAOb,MACb,KAAKP,EACH,OAAO,2BACFmB,GADL,IAEEL,MAAO,YAAIK,EAAML,OAAOO,QAAO,SAACC,GAAD,OAAkBF,EAAOZ,UAAYc,EAAYC,QAGpF,KAAKtB,EACH,OAAO,2BACFkB,GADL,IAEEL,MAAM,GAAD,mBAAMK,EAAML,OAAZ,CAAmB,CACtBU,KAAMJ,EAAOZ,QACbiB,WAAW,EACXF,GAAIJ,EAAML,MAAMY,OAAS,OAI/B,KAAKxB,EACH,OAAO,2BACFiB,GADL,IAEEL,MAAO,YAAIK,EAAML,OACda,KAAI,SAACC,GAAD,OAAoBA,EAAcL,KAAOH,EAAOZ,QAAQe,GAApC,2BAChBK,GADgB,IACDH,WAAYL,EAAOZ,QAAQiB,YAC/CG,OAEV,KAAKzB,EACH,OAAO,2BACFgB,GADL,IAEER,YAAaS,EAAOZ,UAExB,KAAKJ,EACH,OAAO,2BACFe,GADL,IAEEP,aAAcQ,EAAOZ,UAEzB,QACE,OAAOW,IE5FXU,SDO6B,WAA2C,IAA1CV,EAAyC,uDAAjCN,EAAcO,EAAmB,uCACvE,OAAQA,EAAOb,MACb,KAAKQ,EACH,OAAO,2BACFI,GADL,IAEEV,aAAcW,EAAOZ,UAEzB,QACE,OAAOW,MCVEW,EAFDC,sBAAYd,EAASe,8BAAoBC,8BCV1CC,EAAoDC,I,eCGpDC,EAAiB,SAAC,GAAmB,IAAjB1B,EAAgB,EAAhBA,KACzB2B,EAAWC,cAUjB,OACE,qCACE,wBAAOC,UAAU,mBAAjB,UACE,uBACEhC,KAAK,WACLgC,UAAU,mBACVC,QAAS9B,EAAKe,UACdgB,SAAU,WAdhBJ,EAAShC,EAeqBK,OAGzBA,EAAKe,WAAa,sBAAMc,UAAU,wBAAhB,6BAErB,4BAAI7B,EAAKe,UAAY,4BAAIf,EAAKc,OAAYd,EAAKc,OAC/C,wBACEe,UAAU,kCACVhC,KAAK,SACLmC,QAAS,WArBW,IAACpC,IAsBDI,EAAKa,GArB7Bc,EAAShC,EAAsBC,KAiB7B,wBCpBOqC,EAAqB,WAChC,IAAMN,EAAWC,cAET7B,EAAiByB,GAAiB,SAACf,GAAD,OAAsBA,EAAMU,YAA9DpB,aAWR,OACE,uBACE8B,UAAU,cACVK,SAAU,SAACC,GARc,IAACC,GASxBD,EAAME,iBAEDtC,KAXmBqC,EAeH,GAdzBT,EAAShC,EAAmBI,IAC5B4B,EAASrB,EAAgC8B,MAIzC,UAYE,uBAAOP,UAAU,qBAAjB,SACE,uBACEhC,KAAK,OACLyC,KAAK,OACLC,UAAW,IACXV,UAAU,6CACVW,YAAY,cACZJ,MAAOrC,EACPgC,SAAU,SAACI,IA9BU,SAACA,GAC5BR,EAASrB,EAAgC6B,EAAMM,OAAOL,QA8B9CM,CAAqBP,QAI3B,wBACEN,UAAU,+BACVhC,KAAK,SAFP,qBCzCO8C,EAAqB,SAAC,GAAD,IAAGvC,EAAH,EAAGA,MAAH,OAChC,qCACE,oBAAIyB,UAAU,kBAAd,SACGzB,EAAMa,KAAI,SAACjB,GAAD,OACT,oBAEE6B,UAAU,kBAFZ,SAIE,cAAC,EAAD,CAAM7B,KAAMA,KAHPA,EAAKa,SAOhB,cAAC,EAAD,QC0EW+B,EAnFO,WACpB,IAAMjB,EAAWC,cAEjB,EAIeJ,GAAiB,SAACf,GAAD,OAAsBA,EAAML,SAH1DF,EADF,EACEA,aACAE,EAFF,EAEEA,MACAH,EAHF,EAGEA,YAOI4C,EAAsB,SAACC,GAC3BnB,EAAShC,EAA2BmD,KAGhCC,EAA4B3C,EAAMO,QAAO,SAACX,GAC9C,OAAQE,GACN,IAAK,SACH,OAA0B,IAAnBF,EAAKe,UACd,IAAK,YACH,OAA0B,IAAnBf,EAAKe,UACd,QACE,OAAOf,MAEVW,QAAO,SAACX,GAAD,OAAoBA,EAAKc,KAAKkC,SAAS/C,MAEjD,OACE,yBAAS4B,UAAU,OAAnB,SACE,sBAAKA,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,kBACA,qBAAKA,UAAU,cAAf,SACE,sBAAMA,UAAU,oBAAhB,SACE,uBAAOA,UAAU,qBAAjB,SACE,uBACEhC,KAAK,OACLyC,KAAK,SACLT,UAAU,qBACVW,YAAY,SACZJ,MAAOnC,EACP8B,SAAU,SAACI,GAhCG,IAACc,IAiCOd,EAAMM,OAAOL,MAhC/CT,EAAShC,EAA0BsD,aAsC/B,sBAAKpB,UAAU,uBAAf,UACE,wBACEA,UAAS,sBAAmC,QAAjB3B,GAA2B,uBACtDL,KAAK,SACLmC,QAAS,kBAAMa,EAAoB,QAHrC,iBAOA,wBACEhB,UAAS,sBAAmC,WAAjB3B,GAA8B,uBACzDL,KAAK,SACLmC,QAAS,kBAAMa,EAAoB,WAHrC,oBAOA,wBACEhB,UAAS,sBAAmC,cAAjB3B,GAAiC,uBAC5DL,KAAK,SACLmC,QAAS,kBAAMa,EAAoB,cAHrC,0BAQF,qBAAKhB,UAAU,YAAf,SACE,cAAC,EAAD,CAAUzB,MAAO2C,MAEnB,8CAEG3C,EAAMY,gBC3EFkC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAD,CAAUxC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFyC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.b2cf8538.chunk.js","sourcesContent":["const DELETE_TODO = 'app/DELETE_TODO';\nconst ADD_TODO = 'app/ADD_TODO';\nconst SET_COMPLETED_TODO = 'app/SET_TODOS';\nconst SET_SEARCH_FIELD = 'app/SET_SEARCH_FIELD';\nconst SET_FILTER_TODO_BY = 'app/SET_FILTER_TODO_BY';\n\nexport type TodoType = {\n  text: string,\n  completed: boolean,\n  id: number,\n};\n\nexport interface RootState {\n  filterTodoBy: string,\n  todos: TodoType[],\n  searchField: string,\n}\n\nexport const appActions = {\n  deleteTodo: (todoId: string) => ({ type: DELETE_TODO, payload: todoId }),\n  addTodo: (addTodoField: string) => ({ type: ADD_TODO, payload: addTodoField }),\n  setTodos: (todo: TodoType) => ({ type: SET_COMPLETED_TODO, payload: todo }),\n  setSearchField: (searchField: string) => ({ type: SET_SEARCH_FIELD, payload: searchField }),\n  setFilterTodoBy: (filterTodoBy: string) => ({ type: SET_FILTER_TODO_BY, payload: filterTodoBy }),\n};\n\ninterface AppState {\n  todos: TodoType[],\n  searchField: string,\n  filterTodoBy: string,\n}\n\ninterface DeleteTodo {\n  type: 'app/DELETE_TODO',\n  payload: string,\n}\n\ninterface AddTodo {\n  type: 'app/ADD_TODO',\n  payload: string,\n}\n\ninterface SetTodos {\n  type: 'app/SET_TODOS',\n  payload: TodoType,\n}\n\ninterface SetSearchField {\n  type: 'app/SET_SEARCH_FIELD',\n  payload: string,\n}\n\ninterface SetFilterTodoBy {\n  type: 'app/SET_FILTER_TODO_BY',\n  payload: string,\n}\n\ntype Action = DeleteTodo | AddTodo | SetSearchField | SetFilterTodoBy | SetTodos\n\nconst initialState: AppState = {\n  todos: [],\n  searchField: '',\n  filterTodoBy: 'all',\n};\n\nexport const todosReducer = (state = initialState, action: Action): AppState => {\n  switch (action.type) {\n    case DELETE_TODO: {\n      return {\n        ...state,\n        todos: [...state.todos].filter((currentTodo) => +action.payload !== currentTodo.id),\n      };\n    }\n    case ADD_TODO: {\n      return {\n        ...state,\n        todos: [...state.todos, {\n          text: action.payload,\n          completed: false,\n          id: state.todos.length + 1,\n        }],\n      };\n    }\n    case SET_COMPLETED_TODO:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .map((completedTodo) => (completedTodo.id === action.payload.id\n            ? { ...completedTodo, completed: !action.payload.completed }\n            : completedTodo)),\n      };\n    case SET_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    case SET_FILTER_TODO_BY:\n      return {\n        ...state,\n        filterTodoBy: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","const SET_ADD_TODO_FIELD = 'todoForm/SET_ADD_TODO_FIELD';\n\ninterface SetAddTodoField {\n  type: 'todoForm/SET_ADD_TODO_FIELD',\n  payload: string,\n}\n\ntype Action = SetAddTodoField\n\nexport const todoFormActions = {\n  setAddTodoField: (addTodoField: string) => ({ type: SET_ADD_TODO_FIELD, payload: addTodoField }),\n};\n\nconst initialState = {\n  addTodoField: '',\n};\n\nexport const todoFormReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_ADD_TODO_FIELD:\n      return {\n        ...state,\n        addTodoField: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// @ts-ignore\nimport { todosReducer } from './app.tsx';\n// @ts-ignore\nimport { todoFormReducer } from './todoForm.ts';\n\nconst reducer = combineReducers({\n  todos: todosReducer,\n  todoForm: todoFormReducer,\n});\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware()));\n\nexport default store;\n\nexport type RootState = ReturnType<typeof reducer>\n","import { RootState } from '../store/index'; // eslint-disable-line\nimport { TypedUseSelectorHook, useSelector } from 'react-redux'; // eslint-disable-line\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\n// @ts-ignore\nimport { appActions, TodoType } from '../../store/app.tsx';\n\nexport const Todo: React.FC = ({ todo }: any) => {\n  const dispatch = useDispatch();\n\n  const onChangeCompletedTodo = (todos: TodoType) => {\n    dispatch(appActions.setTodos(todos));\n  };\n\n  const onClickDeleteTodo = (todoId: string) => {\n    dispatch(appActions.deleteTodo(todoId));\n  };\n\n  return (\n    <>\n      <label className=\"todo-list__label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo-list__input\"\n          checked={todo.completed}\n          onChange={() => {\n            onChangeCompletedTodo(todo);\n          }}\n        />\n        {todo.completed && <span className=\"todo-list__label-done\">✔️</span>}\n      </label>\n      <p>{todo.completed ? <s>{todo.text}</s> : todo.text}</p>\n      <button\n        className=\"todo-button todo-button--delete\"\n        type=\"button\"\n        onClick={() => {\n          onClickDeleteTodo(todo.id);\n        }}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\n// @ts-ignore\nimport { useTypedSelector } from '../../hooks/useTypedSelector.ts';\n\n// @ts-ignore\nimport { todoFormActions } from '../../store/todoForm.ts';\n// @ts-ignore\nimport { appActions, RootState } from '../../store/app.tsx';\n\nexport const TodoForm: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { addTodoField } = useTypedSelector((state: RootState) => state.todoForm);\n\n  const onChangeAddTodoField = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(todoFormActions.setAddTodoField(event.target.value));\n  };\n\n  const onSubmitAddTodoField = (value: string): void => {\n    dispatch(appActions.addTodo(addTodoField));\n    dispatch(todoFormActions.setAddTodoField(value));\n  };\n\n  return (\n    <form\n      className=\"todo-search\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (!addTodoField) {\n          return;\n        }\n\n        onSubmitAddTodoField('');\n      }}\n    >\n      <label className=\"todo-search__label\">\n        <input\n          type=\"text\"\n          name=\"todo\"\n          maxLength={300}\n          className=\"todo-search__input todo-search__input--add\"\n          placeholder=\"Add todo...\"\n          value={addTodoField}\n          onChange={(event) => {\n            onChangeAddTodoField(event);\n          }}\n        />\n      </label>\n      <button\n        className=\"todo-button todo-button--add\"\n        type=\"submit\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\n\n// @ts-ignore\nimport { TodoTypes } from '../../store/app.tsx';\n\n// @ts-ignore\nimport { Todo } from '../Todo/Todo.tsx';\n// @ts-ignore\nimport { TodoForm } from '../TodoForm/TodoForm.tsx';\n\nexport const TodoList: React.FC = ({ todos }: any) => (\n  <>\n    <ul className=\"todo-list__list\">\n      {todos.map((todo: TodoTypes) => (\n        <li\n          key={todo.id}\n          className=\"todo-list__item\"\n        >\n          <Todo todo={todo} />\n        </li>\n      ))}\n    </ul>\n    <TodoForm />\n  </>\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\n// @ts-ignore\nimport { useTypedSelector } from './hooks/useTypedSelector.ts';\n// @ts-ignore\nimport { appActions, TodoType, RootState } from './store/app.tsx';\n\nimport './styles/utils/style.scss';\n\n// @ts-ignore\nimport { TodoList } from './components/TodoList/TodoList.tsx';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const {\n    filterTodoBy,\n    todos,\n    searchField,\n  }: RootState = useTypedSelector((state: RootState) => state.todos);\n\n  const onChangeSearchField = (query: string): void => {\n    dispatch(appActions.setSearchField(query));\n  };\n\n  const onClickFilterTodoBy = (filterBy: string): void => {\n    dispatch(appActions.setFilterTodoBy(filterBy));\n  };\n\n  const preparedTodos: TodoType[] = todos.filter((todo: TodoType) => {\n    switch (filterTodoBy) {\n      case 'active':\n        return todo.completed === false;\n      case 'completed':\n        return todo.completed === true;\n      default:\n        return todo;\n    }\n  }).filter((todo: TodoType) => todo.text.includes(searchField));\n\n  return (\n    <section className=\"todo\">\n      <div className=\"todo__wrapper\">\n        <h1 className=\"todo__title\">TODO</h1>\n        <div className=\"todo-search\">\n          <form className=\"todo-search__form\">\n            <label className=\"todo-search__label\">\n              <input\n                type=\"text\"\n                name=\"search\"\n                className=\"todo-search__input\"\n                placeholder=\"Search\"\n                value={searchField}\n                onChange={(event) => {\n                  onChangeSearchField(event.target.value);\n                }}\n              />\n            </label>\n          </form>\n        </div>\n        <div className=\"todo-button__wrapper\">\n          <button\n            className={`todo-button ${(filterTodoBy === 'all') && 'todo-button--active'}`}\n            type=\"button\"\n            onClick={() => onClickFilterTodoBy('all')}\n          >\n            All\n          </button>\n          <button\n            className={`todo-button ${(filterTodoBy === 'active') && 'todo-button--active'}`}\n            type=\"button\"\n            onClick={() => onClickFilterTodoBy('active')}\n          >\n            Active\n          </button>\n          <button\n            className={`todo-button ${(filterTodoBy === 'completed') && 'todo-button--active'}`}\n            type=\"button\"\n            onClick={() => onClickFilterTodoBy('completed')}\n          >\n            Completed\n          </button>\n        </div>\n        <div className=\"todo-list\">\n          <TodoList todos={preparedTodos} />\n        </div>\n        <span>\n          Tasks:&nbsp;\n          {todos.length}\n        </span>\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store/index.tsx';\n\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}